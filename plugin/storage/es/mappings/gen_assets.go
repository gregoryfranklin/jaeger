// Code generated by "esc -pkg mappings -o plugin/storage/es/mappings/gen_assets.go -ignore assets -prefix plugin/storage/es/mappings plugin/storage/es/mappings"; DO NOT EDIT.

package mappings

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/.nocover": {
		name:    ".nocover",
		local:   "plugin/storage/es/mappings/.nocover",
		size:    43,
		modtime: 1563813000,
		compressed: `
H4sIAAAAAAAC/youSSzJzFYoSEzOTkxPVcjILy4pVkgsLcnXTU/NSy1KLElNUUjLzEkt1uMCBAAA//8y
IKK1KwAAAA==
`,
	},

	"/jaeger-service.json": {
		name:    "jaeger-service.json",
		local:   "plugin/storage/es/mappings/jaeger-service.json",
		size:    916,
		modtime: 1563884923,
		compressed: `
H4sIAAAAAAAC/8xQQUszMRC9768Iw3f6KIsI9ZBb1YqCVmnxJBKm2elucJONybRayv53Wdna3bb05MFL
MpN578172SRCQCRm4/IIsmmFAOMy+kzd0s4pqGqhYoEhiyDFv41Sk+eHy/FUPd6o2e1oej1Tqh4cpwXy
pdF4SJyOn+7vrkYHVIveG5enjiJTphaGyiympbGGQQ7PethA70uKHFONuqCUHM5LAslhSYkQ37rQ6u2C
qazS20YIyNYOrdGKyfoSmSLIl3YmxOanar7Io1OMeVQW/U6hnbZ79t+FAF57AglvtP6oQgaD/bnJXRVI
4bxaEcjz4UUPUPfx4JELZZF1ARIY8/Q/dAB1coTXS+FDpSnGPxakdZWeCtRWr1udhuQpsKHYNQuRwspo
mqClfohTAU6Y7xiHZiGyqdzvqSfduznrpE6+AgAA//8cbA7YlAMAAA==
`,
	},

	"/jaeger-span.json": {
		name:    "jaeger-span.json",
		local:   "plugin/storage/es/mappings/jaeger-span.json",
		size:    3692,
		modtime: 1563884910,
		compressed: `
H4sIAAAAAAAC/+xWT28TPxC951NYo9/pp2qFkMphb4UWUYkW1JYTQtbEO7sx9T/sSSGq8t1Rki3tJt4N
SFmEBJdkvfZ788Y78+z7iRCQiFm7JkG5GgoB2lX0rXBzO6UofS3TDGOVoBT/3Ut5+eHi5dmVfPdaXr85
uTq9lnJ5lIdFCkYr3AVenb1/e/7qZAdqMQTtmsJRYqpkrclUqTDaaoby+FlnbaQvc0qcCoVqRgU5nBqC
kuOcJkKseaHle0xMVl49DISAauHQaiWZbDDIlKD82M4Jcf/jabVFAZ1kbJK0GB4Z2tk2zvZ7IYAXgaCE
W1p89bGCo+153TgfSeLU3xGUz49fdBYsu+shIM+kRVYzKIGxKf6HJwuWkwyuk0WIXlFKf1girapiKKH2
6dMDzwoUKLKm9FQscERF56fdBIbEDwh/IhoCRnJ8HdCNQJ7GoV1tELL27hItHV40Y+Qb3cdsvGtgGHih
jdEpD6+Qqauq9tEiQwkUvJpJuwFnI1TzTd6/qqw22PTo0Y6poZjHGd8H2xhZN5HWdKCs0SQ62urPTFFv
CLWlxGhDf292E8u13cZQ+xkycvdI3iN7PX1Li9z7/abyE8aSyXKNukMzp98elbG5WZOPGXcyNF7uOw8e
3HarXgcqL1G804p2TWSEc4Fx4Ozx08+kGPYR/Kvvv7q+I9UUySka3ZIj1fndOHRT5O40I8TJXUMOEWbv
J9vp+r6O3wKN/oWznX3gXe/p5MMb6zi1Onhd3/yvfpeT5eR7AAAA///c0Vx8bA4AAA==
`,
	},

	"/": {
		name:  "/",
		local: `plugin/storage/es/mappings`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"plugin/storage/es/mappings": {
		_escData["/.nocover"],
		_escData["/jaeger-service.json"],
		_escData["/jaeger-span.json"],
	},
}
